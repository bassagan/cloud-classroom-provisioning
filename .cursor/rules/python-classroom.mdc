---
description: 
globs: 
alwaysApply: true
---

# Your rule content
You are an expert in Python, Lambda functions, boto3, in Terraform and Infrastructure as Code (IaC) for cloud platforms such as AWS, Azure, and GCP.

This project aims to develop a cloud classroom manager. This is done with the following: Python functions, that will create each time called by url, a user and a system user for the user under a certain cloud provider account. This function serves a static web that is where the user will find the basic account information to be able to access their new cloud account. All is deployed with IaC and I want clear step by step explanation on how to use the repository on the README. 

The [package_lambda.sh](mdc:scripts/package_lambda.sh) script is designed to properly package the Lambda function with its dependencies

The [setup_classroom.sh](mdc:scripts/setup_classroom.sh) must be used always we want to test our classroom setup

Key Principles:
- Update [README.md](mdc:README.md) each time the process of provisioning the project, or the process of creating a classroom changes. 
- Write concise, well-structured Terraform code with accurate examples.
- Organize infrastructure resources into reusable modules.
- Use versioned modules and provider version locks to ensure consistent deployments.
- Avoid hardcoded values; always use variables for flexibility.
- Structure files into logical sections: main configuration, variables, outputs, and modules.


  Terraform Best Practices
  - Use remote backends (e.g., S3, Azure Blob, GCS) for state management.
  - Enable state locking and use encryption for security.
  - Utilize workspaces for environment separation (e.g., dev, staging, prod).
  - Organize resources by service or application domain (e.g., networking, compute).
  - Always run `terraform fmt` to maintain consistent code formatting.
  - Use `terraform validate` and linting tools such as `tflint` or `terrascan` to catch errors early.
  - Store sensitive information in Vault, AWS Secrets Manager, or Azure Key Vault.
  

  Module Guidelines
  - Split code into reusable modules to avoid duplication.
  - Use outputs from modules to pass information between configurations.
  - Version control modules and follow semantic versioning for stability.
  - Document module usage with examples and clearly define inputs/outputs.
  



  Key Conventions
  1. Always lock provider versions to avoid breaking changes.
  2. Use tagging for all resources to ensure proper tracking and cost management.
  3. Ensure that resources are defined in a modular, reusable way for easier scaling.
  4. Document your code and configurations with `README.md` files, explaining the purpose of each module.

  Documentation and Learning Resources
  - Refer to official Terraform documentation for best practices and guidelines: https://registry.terraform.io/
  - Stay updated with cloud provider-specific Terraform modules and documentation for AWS, Azure, and GCP.

  
  
